#+TITLE: Emacs Configuration
#+AUTHOR: Song Li
#+EMAIL:ghosty.lee.1984@gmail.com

* use-package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(use-package try
  :ensure t)
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
* font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font .  "DejaVuSansMonoForPowerline NF-20"))
(set-face-attribute 'default t :font  "DejaVuSansMonoForPowerline NF-20" )
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :init
  (require 'spaceline-config)
  (setq powerline-height 32)
  (setq powerline-default-separator 'arrow)
  (setq spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
  (setq evil-normal-state-tag "NORMAL")
  (setq evil-insert-state-tag "INSERT")
  (setq evil-visual-state-tag "VISUAL")
  (spaceline-toggle-evil-state-on)
  (spaceline-spacemacs-theme))
#+END_SRC
* UI
#+begin_src emacs-lisp
(use-package nord-theme :ensure t)
(setq inhibit-startup-screen t)
(transient-mark-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(fset 'yes-or-no-p 'y-or-n-p)
(set-window-scroll-bars (minibuffer-window) nil nil)
(global-prettify-symbols-mode t)
#+end_src
* evil-mode
#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :config
  (evil-mode 1)

  (use-package evil-leader
    :ensure t
    :config
    (evil-leader/set-leader ",")
    (global-evil-leader-mode))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))

  (use-package evil-indent-textobject
    :ensure t)

  (use-package evil-org
    :ensure t
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys)))
#+end_src
* org-mode
#+begin_src emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(use-package org
  :ensure nil
  :bind
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    ("C-c r" . org-refile)
  :config
    (evil-define-key 'normal org-mode-map (kbd "TAB") 'org-cycle)
    (evil-define-key 'normal org-mode-map (kbd "SPC") 'org-cycle)
  :custom
    (org-log-done t)
    (org-startup-indented t)
    (org-default-notes-file "~/Dropbox/org/bojo.org")
    (org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
    (org-todo-keywords
      (quote ((sequence "TODO(t)" "DOING(i)" "WAITING(w)" "SOMEDAY(s)" "|" "DONE(d)"))))
    (org-todo-keyword-faces
      (quote (("TODO"      :foreground "yellow"       :weight bold)
              ("DOING"     :foreground "red"          :weight bold)
              ("DONE"      :foreground "forest green" :weight bold)
              ("WAITING"   :foreground "orange"       :weight bold)
              ("SOMEDAY"   :foreground "magenta"      :weight bold)))))
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-ellipsis "â¤µ"))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files '("~/Dropbox/org"))
  (org-agenda-inhibit-startup t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-span 2)
  (org-agenda-start-on-weekday 6)
  (org-agenda-sticky nil)
  (org-agenda-tags-column -100)
  (org-agenda-time-grid '((daily today require-timed)))
  (org-agenda-use-tag-inheritance t)
  (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
  (org-directory "~/Dropbox/org")
  (org-enforce-todo-dependencies t)
  (org-habit-graph-column 80)
  (org-habit-show-habits-only-for-today nil)
  (org-track-ordered-property-with-tag t))

(global-set-key "\C-ca" 'org-agenda)
#+end_src
** org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :bind (("C-c t" . journal-file-today)
         ("C-c y" . journal-file-yesterday))
  :ensure t
  :defer t
  :custom
  (org-journal-dir "~/Dropbox/org/journal/")
  (org-journal-date-format "%A, %d %B %Y")
  (org-journal-file-format "%Y%m%d.org")
  (org-journal-time-format ""))
#+end_src
* Autocomplete
#+begin_src emacs-lisp
(use-package auto-complete 
:ensure t
:init
(progn
(ac-config-default)
  (global-auto-complete-mode t)
 ))
#+end_src
* neotree
#+begin_src emacs-lisp
(use-package neotree
  :ensure t
  :after evil evil-leader
  :config
  (evil-leader/set-key "e" 'neotree-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "R") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
  (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
  (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "I") 'neotree-hidden-file-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "o") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "s") 'neotree-enter-vertical-split)
  (evil-define-key 'normal neotree-mode-map (kbd "i") 'neotree-enter-horizontal-split)
  :custom
  (neo-smart-open t)
  (neo-time (if (display-graphic-p) 'icons 'arrow)))

#+end_src
* treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

#+end_src
* no-littering
#+begin_src emacs-lisp
(use-package no-littering
  :ensure t)

#+end_src
