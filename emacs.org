#+TITLE: Emacs Configuration
#+AUTHOR: Song Li
#+EMAIL:ghosty.lee.1984@gmail.com

* use-package
#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
(use-package try
  :ensure t)
(use-package which-key
  :ensure t
  :config
  (which-key-mode))
#+END_SRC
* font
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(font .  "DejaVuSansMonoForPowerline NF-20"))
(set-face-attribute 'default t :font  "DejaVuSansMonoForPowerline NF-20" )
#+END_SRC
* spaceline
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure t
  :config
  (require 'spaceline-config)
  (spaceline-emacs-theme))

(setq-default
 powerline-height 32
 powerline-default-separator 'arrow)
#+END_SRC
* UI
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
(transient-mark-mode 1)

(menu-bar-mode -1)
(tool-bar-mode -1)
(toggle-scroll-bar -1)
(fset 'yes-or-no-p 'y-or-n-p)
(set-window-scroll-bars (minibuffer-window) nil nil)
(global-prettify-symbols-mode t)
#+end_src
* evil-mode
#+begin_src emacs-lisp
(use-package evil
  :config
  (evil-mode 1))
(use-package evil-surround
  :config
  (global-evil-surround-mode 1))
(use-package evil-org
  :ensure t
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme)))
  (require 'evil-org-agenda)
  (evil-org-agenda-set-keys))
#+end_src
* org-mode
#+begin_src emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(use-package org
  :ensure nil
  :custom
  (org-log-done 'time))
(use-package org-bullets
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-ellipsis "â¤µ"))
#+end_src
** org-agenda
#+begin_src emacs-lisp
(use-package org-agenda
  :ensure nil
  :after org
  :custom
  (org-agenda-dim-blocked-tasks t)
  (org-agenda-files '("~/Dropbox/org"))
  (org-agenda-inhibit-startup t)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-span 2)
  (org-agenda-start-on-weekday 6)
  (org-agenda-sticky nil)
  (org-agenda-tags-column -100)
  (org-agenda-time-grid '((daily today require-timed)))
  (org-agenda-use-tag-inheritance t)
  (org-columns-default-format "%14SCHEDULED %Effort{:} %1PRIORITY %TODO %50ITEM %TAGS")
  (org-default-notes-file "~/Dropbox/org/inbox.org")
  (org-directory "~/Dropbox/org")
  (org-enforce-todo-dependencies t)
  (org-habit-graph-column 80)
  (org-habit-show-habits-only-for-today nil)
  (org-track-ordered-property-with-tag t))

(global-set-key "\C-ca" 'org-agenda)
#+end_src
** org-journal
#+begin_src emacs-lisp
(use-package org-journal
  :after org
  :bind (("C-c t" . journal-file-today)
         ("C-c y" . journal-file-yesterday))
  :ensure t
  :defer t
  :custom
  (org-journal-dir "~/Dropbox/org/journal/")
  (org-journal-date-format "%A, %d %B %Y")
  (org-journal-file-format "%Y%m%d.org")
  (org-journal-time-format ""))
#+end_src
* Autocomplete
#+begin_src emacs-lisp
(use-package auto-complete 
:ensure t
:init
(progn
(ac-config-default)
  (global-auto-complete-mode t)
 ))
#+end_src
